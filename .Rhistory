DnA[1,] = NULL
DnA[1,]
DnA$study = NULL
DnA
DnA = data.frame(num , name , study , stringsAsFactors = FALSE)
DnA
str(DnA)
ncol(DnA)
nrow(DnA)
colnames(DnA)
rownames(DnA)
colnames(DnA) = c('학번','이름','요일')
rownames(DnA) = c('학회장','학회원','학회원','학회원','부학회장')
colnames(DnA) = c('학번','이름','요일')
rownames(DnA) = c('학회장','학회원1','학회원2','학회원3','부학회장')
DnA
DnA['부학회장',]
rownames(DnA) = c('학회장','학회원1','학회원2','부학회장','학회원3')
DnA['부학회장',]
vec = c('Im','jong','un')
vec
nchar(vec)
lengths(vec)
length(vec)
vec2 = c('황태용','은','고인물','이다')
vec2
nchar(vec2)
lengths(vec2)
length(vec2)
vec3 ='국민 대학교'
length(vec3)
lengths(vec3)
nchar(vec3)
paste('오늘','수업은',4,'회차')
nchar(paste('오늘','수업은',4,'회차'))
length(paste('오늘','수업은',4,'회차'))
vec = c(1,2,3,4)
paste(vec)
nchar(paste(vec)
)
length(paste(vec))
paste(1:5, c('st','nd','rd',rep('th',2)))
paste(1:5, c('st','nd','rd','th','th'))
length(paste(1:5, c('st','nd','rd','th','th')))
paste(1,2,3,4,sep='_')
paste('황태용','은','고인물','이다',sep=' ')
paste('황태용','은','고인물','이다',sep='')
paste0('황태용','은','고인물','이다')
paste('황태용','은','고인물','이다',sep='',collapse=',')
paste('황태용','은','고인물','이다',sep=' ',collapse=',')
paste(c(1,2,3),rep('번',3), sep='',collapse=',')
paste(c(1,2,3),rep('번',3), sep='')
paste(c(1,2,3),rep('번',3), sep='',collapse=',')
nchar(paste(c(1,2,3),rep('번',3), sep=''))
paste(c(1,2,3),rep('번',3), sep='',collapse=',')
nchar(paste(c(1,2,3),rep('번',3), sep='',collapse=','))
vec = c('황태용 그리고 임종언 그리고 정재엽 그리고 곽홍재 그리고 남윤주')
strsplit(vec)
strsplit(vec,'그리고')
unlist(strsplit(vec,'그리고'))
nchar( unlist(strsplit(vec,'그리고')) )
strsplit(vec,' 그리고 ')
unlist(strsplit(vec,' 그리고 '))
nchar( unlist(strsplit(vec,' 그리고 ')) )
library(stringr)
str_split(vec)
str_split(vec,' 그리고 ')
str_split(vec,' 그리고 ',n=2)
str_split(vec,' 그리고 ',n=5)
str_split(vec,' 그리고 ',n=3)
str_split(vec,' 그리고 ',n=4)
unlist(str_split(vec,' 그리고 '))
unlist(str_split(vec,' 그리고 ',n=2))
unlist(str_split(vec,' 그리고 ',n=4))
str_split(vec,' 그리고 ',n=3)
substr('Kookmin_Univ',1,4)
substr('Kookmin_Univ',8,12)
substr('Kookmin_Univ',9,12)
substr('Kookmin_Univ',9,length('Kookmin_Univ'))
substr('Kookmin_Univ',9,nchar('Kookmin_Univ'))
team = c('NewYorkExcelsior,NYE','SeoulDynasty,SEO','VancouverTitans,VAN')
substr(team,nchar(team)-1,nchar(team))
str_sub(team,nchar(team)-1,nchar(team))
substr(team,nchar(team)-2,nchar(team))
str_sub(team,nchar(team)-2,nchar(team))
str_sub(team,-3,-1)
substr(team,-3,-1)
str_sub(team,-3,-1)
substr(team,-3,-1)
str_sub(team,-3,-1)
substr(team,-3,-1)
senten = 'Hwang is goinmul. Hwang is nojam too.'
sub(pattern = 'Hwang',replacement='Im',x=senten)
sub(pattern = 'Hwang',replacement='Im',x=senten,ignore.case=TRUE)
gsub(pattern = 'Hwang',replacement='Im',x=senten)
txt <- c('The', 'licenseslicenses', 'for', 'most',
'software', 'are', 'designed', 'to', 'take', 'away',
'your', 'freedom', 'to', 'share', 'and', 'change','it.')
d <- grep('g', txt)  ;  d
i <- grep('[gu]', txt)
i
txt[i]
txt[d]
grep('[au]', c('Equator', 'North Pole', 'South Pol'))
grep('o.e', c('Equator', 'North Pole', 'South Pole'))
grep('N..t', c('Equator', 'North Pole', 'South Pole'))
grep('.', c('abc', 'de', 'f.g'))
grep('\\.', c('abc', 'de', 'f.g'))
grep('.', c('abc', 'de', 'f.g'), fixed = TRUE)
grep('O.e', c('Equator', 'North Pole', 'South Pole'))
grep('O.e', c('Equator', 'North Pole', 'South Pole'))
grep('o.E', c('Equator', 'North Pole', 'South Pole'))
x = Sys.Date()
x
as.Date('2019-02-09')
class(as.Date('2019-02-09'))
as.Date('2019/02/09')
as.Date('2019-02-09')
class(as.Date('2019-02-09'))
as.Date('2019/02/09')
as.Date('2019/02/09',format='%Y/%m/%d')
as.Date('2019-02-09')
as.Date('2019-02-09',format='%Y-%m-%d')
as.Date('19년2월9일')
as.Date('19년2월9일',format='%y년%m월%d일')
a = '2019년2월9일'
class(a)
as.Date(a,format='%y년%m월%d일')
as.Date(a,format='%Y년%m월%d일')
b = 20190209
class(b)
as.Date(b,format='%Y%m%d')
b1 = as.character(b)
class(b1)
as.Date(b1,format='%Y%m%d')
day = as.Date('2019-02-09',format='%Y-%m-%d')
months(day)
weekdays(day)
library(lubridate)
ymd('2019년2월9일')
ymd('2019-2-9')
ymd('2019/02/09')
ymd('2019년2월9일')
ymd('190209')
ymd('19.02.09')
ymd('19_02_09')
ymd('19//02//09')
ymd('19!@#02!@#09')
ymd('19???02zz09')
date_time = ymd_hms('2019-02-09 13:00:24')
date_time
year(date_time)
meonth(date_time)
month(date_time)
day(date_time)
wday(date_time)
yday(date_time)
hour(date_time)
minute(date_time)
second(date_time)
date_time = ymd_hms('2019-02-09 13:56:24')
minute(date_time)
week(date_time)
ymd('2019-02-09') + month(2)
ymd('2019-02-09') + months(2)
months(2)
ymd('2019-02-09') + years(1)
vec = c('Im','jong','un')
vec
nchar(vec)
lengths(vec)
length(vec)
vec2 = c('황태용','은','고인물','이다')
vec2
nchar(vec2)
lengths(vec2)
length(vec2)
vec3 ='국민 대학교'
nchar(vec3)
paste('오늘','수업은',4,'회차')
nchar(paste('오늘','수업은',4,'회차'))
length(paste('오늘','수업은',4,'회차'))
vec = c(1,2,3,4)
paste(vec)
length(paste(vec))
paste(1:5, c('st','nd','rd',rep('th',2)))
paste(1:5, c('st','nd','rd','th','th'))
length(paste(1:5, c('st','nd','rd','th','th')))
paste(1,2,3,4,sep='_')
paste('황태용','은','고인물','이다',sep=' ')
paste('황태용','은','고인물','이다',sep='')
paste0('황태용','은','고인물','이다')
paste(c(1,2,3),rep('번',3), sep='')
nchar(paste(c(1,2,3),rep('번',3), sep=''))
paste(c(1,2,3),rep('번',3), sep='',collapse=',')
nchar(paste(c(1,2,3),rep('번',3), sep='',collapse=','))
vec = c('황태용 그리고 임종언 그리고 정재엽 그리고 곽홍재 그리고 남윤주')
strsplit(vec,'그리고')
unlist(strsplit(vec,'그리고'))
nchar( unlist(strsplit(vec,'그리고')) )
strsplit(vec,' 그리고 ')
unlist(strsplit(vec,' 그리고 '))
nchar( unlist(strsplit(vec,' 그리고 ')) )
library(stringr)
str_split(vec,' 그리고 ')
str_split(vec,' 그리고 ',n=2)
str_split(vec,' 그리고 ',n=4)
unlist(str_split(vec,' 그리고 '))
unlist(str_split(vec,' 그리고 ',n=2))
unlist(str_split(vec,' 그리고 ',n=4))
substr('Kookmin_Univ',1,4)
substr('Kookmin_Univ',9,12)
substr('Kookmin_Univ',9,nchar('Kookmin_Univ'))
team = c('NewYorkExcelsior,NYE','SeoulDynasty,SEO','VancouverTitans,VAN')
substr(team,nchar(team)-2,nchar(team))
str_sub(team,nchar(team)-2,nchar(team))
str_sub(team,-3,-1)
substr(team,-3,-1)
senten = 'Hwang is goinmul. Hwang is nojam too.'
sub(pattern = 'Hwang',replacement='Im',x=senten)
gsub(pattern = 'Hwang',replacement='Im',x=senten)
senten = 'Hwang is goinmul. Hwang is nojam too.'
senten
sub(pattern = 'Hwang',replacement='Im',x=senten)
gsub(pattern = 'Hwang',replacement='Im',x=senten)
txt <- c('The', 'licenseslicenses', 'for', 'most',
'software', 'are', 'designed', 'to', 'take', 'away',
'your', 'freedom', 'to', 'share', 'and', 'change','it.')
d <- grep('g', txt)
d
txt[d]
d <- grep('g', txt)
d
txt[d]
i <- grep('[gu]', txt)
i
txt[i]
i <- grep('[gu]', txt)
i
txt[i]
# 정규표현식... 공부함...
grep('[au]', c('Equator', 'North Pole', 'South Pol'))
grep('o.e', c('Equator', 'North Pole', 'South Pole'))
grep('N..t', c('Equator', 'North Pole', 'South Pole'))
grep('\\.', c('abc', 'de', 'f.g'))
grep('.', c('abc', 'de', 'f.g'), fixed = TRUE)
x = Sys.Date()
x
as.Date('2019-02-09')
class(as.Date('2019-02-09'))
as.Date('2019/02/09')
as.Date('2019/02/09',format='%Y/%m/%d')
as.Date('2019-02-09')
as.Date('2019-02-09',format='%Y-%m-%d')
as.Date('19년2월9일')
as.Date('19년2월9일',format='%y년%m월%d일')
a = '2019년2월9일'
class(a)
as.Date(a,format='%Y년%m월%d일')
b = 20190209
class(b)
as.Date(b,format='%Y%m%d')
b1 = as.character(b)
class(b1)
as.Date(b1,format='%Y%m%d')
day = as.Date('2019-02-09',format='%Y-%m-%d')
months(day)
weekdays(day)
library(lubridate)
ymd('2019-2-9')
ymd('2019/02/09')
ymd('2019년2월9일')
ymd('190209')
ymd('19.02.09')
ymd('19_02_09')
ymd('19//02//09')
ymd('19!@#02!@#09')
ymd('19???02zz09')
date_time = ymd_hms('2019-02-09 13:56:24')
date_time
year(date_time)
month(date_time)
day(date_time)
wday(date_time)
yday(date_time)
hour(date_time)
minute(date_time)
second(date_time)
week(date_time)
ymd('2019-02-09') + months(2)
ymd('2019-02-09') + years(1)
ad = read.csv('C:\\Users\\USER\\Desktop\\2019-1\\다변량통계분석\\0308\\Advertising.csv')
ad
ad = ad[,-1]
head(ad)
fit2=lm(Sales~TV+Radio+Newspaper, data=ad)
summary(fit2)
fit3=lm(Sales~TV+Radio, data=ad)
summary(fit3)
# 1. 기본 데이터 셋을 만든다. 무조건 수치형 데이터여야한다.
c <- c(3,4,1,5,7,9,5,4,6,8,4,5,9,8,7,8,6,7,2,1)
row <- c("A","B","C","D","E","F","G","H","I","J")
col <- c("X","Y")
data <- matrix( c, nrow= 10, ncol=2, byrow=TRUE, dimnames=list(row,col))
data # 데이터 확인하기1
rm(list=ls())
# 1. 기본 데이터 셋을 만든다. 무조건 수치형 데이터여야한다.
c <- c(3,4,1,5,7,9,5,4,6,8,4,5,9,8,7,8,6,7,2,1)
row <- c("A","B","C","D","E","F","G","H","I","J")
col <- c("X","Y")
data <- matrix( c, nrow= 10, ncol=2, byrow=TRUE, dimnames=list(row,col))
data # 데이터 확인하기1
# 2. plot 그래프를 그린다
plot(data) # 데이터 확인하기2
# 3. stats 패키지를 설치한다.
if(!require(stats)) install.packages("stats"); library(stats)
# k개 구하는 공식: k = sqrt(n/2)
k = round(sqrt(length(data)/2))
km <- kmeans(data,2)
kc <- km$centers
cbind(data,km$cluster)
plot(round(kc), col = kc2, pch=22, bg=kc2+1, xlim = range(0:10), ylim = range(0:10))
plot(round(kc), col = kc, pch=22, bg=kc+1, xlim = range(0:10), ylim = range(0:10))
par(new=T)
plot(data, col =km$cluster+1, xlim=range(0:10), ylim = range(0:10))
if(!require(factoextra)) install.packages("factoextra"); library(factoextra)
fviz_cluster(km, data = data, stand = F)
# 2. plot 그래프를 그린다
show()
rm(list=ls())
# 1. 기본 데이터 셋을 만든다. 무조건 수치형 데이터여야한다.
c <- c(3,4,1,5,7,9,5,4,6,8,4,5,9,8,7,8,6,7,2,1)
row <- c("A","B","C","D","E","F","G","H","I","J")
col <- c("X","Y")
data <- matrix( c, nrow= 10, ncol=2, byrow=TRUE, dimnames=list(row,col))
data # 데이터 확인하기1
# 2. plot 그래프를 그린다
windows()
plot(data) # 데이터 확인하기2
# 3. stats 패키지를 설치한다.
if(!require(stats)) install.packages("stats"); library(stats)
# k개 구하는 공식: k = sqrt(n/2)
k = round(sqrt(length(data)/2))
km <- kmeans(data,2)
kc <- km$centers
cbind(data,km$cluster)
plot(round(kc), col = kc, pch=22, bg=kc+1, xlim = range(0:10), ylim = range(0:10))
par(new=T)
plot(data, col =km$cluster+1, xlim=range(0:10), ylim = range(0:10))
if(!require(factoextra)) install.packages("factoextra"); library(factoextra)
fviz_cluster(km, data = data, stand = F)
if(!require(factoextra)) install.packages("factoextra"); library(factoextra)
fviz_cluster(km, data = data, stand = F)
plot(data, col =km$cluster+1, xlim=range(0:10), ylim = range(0:10))
fviz_cluster(km, data = data, stand = F)
rm(list=ls())
# 1. 기본 데이터 셋을 만든다. 무조건 수치형 데이터여야한다.
c <- c(3,4,1,5,7,9,5,4,6,8,4,5,9,8,7,8,6,7,2,1)
row <- c("A","B","C","D","E","F","G","H","I","J")
col <- c("X","Y")
data <- matrix( c, nrow= 10, ncol=2, byrow=TRUE, dimnames=list(row,col))
data # 데이터 확인하기1
plot(data) # 데이터 확인하기2
# 3. stats 패키지를 설치한다.
if(!require(stats)) install.packages("stats"); library(stats)
km <- kmeans(data,2)
rm(list=ls())
# 1. 기본 데이터 셋을 만든다. 무조건 수치형 데이터여야한다.
c <- c(3,4,1,5,7,9,5,4,6,8,4,5,9,8,7,8,6,7,2,1)
row <- c("A","B","C","D","E","F","G","H","I","J")
col <- c("X","Y")
data <- matrix( c, nrow= 10, ncol=2, byrow=TRUE, dimnames=list(row,col))
data # 데이터 확인하기1
# 2. plot 그래프를 그린다
windows()
plot(data) # 데이터 확인하기2
# 3. stats 패키지를 설치한다.
if(!require(stats)) install.packages("stats"); library(stats)
# 4. kmeans 함수로 데이터를 분류한다.
# k개 구하는 공식: k = sqrt(n/2)
k = round(sqrt(length(data)/2))
km <- kmeans(data,2)
km
kc <- km$centers
cbind(data,km$cluster)
plot(round(kc), col = kc, pch=22, bg=kc+1, xlim = range(0:10), ylim = range(0:10))
plot(round(kc), col = kc, pch=22, bg=kc+1, xlim = range(0:10), ylim = range(0:10))
plot(data, col =km$cluster+1, xlim=range(0:10), ylim = range(0:10))
if(!require(factoextra)) install.packages("factoextra"); library(factoextra)
fviz_cluster(km, data = data, stand = F)
library('ISLR')
install.packages('ISLR')
# install.packages('ISLR')
library('ISLR')
head(auto)
head(Auto)
fit.auto=lm(mpg~horsepower,data=Auto)
plot(fit.auto,1)
summary(fit.auto)
plot(fit.auto,1) # Residual Plot  >> X축 :  Fitted Values ( y^ , 예측치)
plot(fit.auto,1) # Residual Plot  >> X축 :  Fitted Values ( y^ , 예측치)
plot(fit.auto,1) # Residual Plot  >> X축 :  Fitted Values ( y^ , 예측치)
# PolyNominal Regression ( 다항식 모델 )
fit.auto2=lm(mpg~horsepower+I(horsepower^2),data=Auto)
plot(fit.auto2,1)
summary(fit.auto2)
plot(fit.auto2$residuals)
plot(fit.auto2$residuals , type='b')
# 오차항의 이분산성
plot(fit.auto2,1)
fit.auto3 = lm(I(log(mpg))~hoursepower+ I(hoursepower^2),data=Auto)
fit.auto3 = lm(I(log(mpg))~horsepower+ I(horsepower^2),data=Auto)
plot(fit.auto3,1)
# WLS ( 가중최소제곱법)
residuals(fit.auto2)
fitted(fit.auto2)
wts = 1/fitted(fit)^2
fit = lm(abs(residuals(fit.auto2)) ~ fitted(fit.auto2)) # 위 두개를 회귀시킴
wts = 1/fitted(fit)^2
fit.auto4 = lm(I(log(mpg))~horsepower+ I(horsepower^2),data=Auto , weights = wts)
plot(fit.auto4,3)
Sys.getlocale()
library(missForest)
install.packages('missForest')
# install.packages('missForest')
library(missForest)
df = prodNA(iris, .05)  # iris 데이터에서 5%의 결측값을 인위적으로 생성한다
df
imp.f = missForest(df)
imp.f
cor(imp.f$ximp[1], iris[1])
library(mice)
imp.m = mice(df, m = 5)  # 5가지 대치 데이터를 생성한다
df1 = complete(imp.m, 1)  # 1번째 대치 데이터로 대치한다
df2 = complete(imp.m, 2)  # 1번째 대치 데이터로 대치한다
df2
library(Amelia)
install.packages('Amelia')
# install.packages('Amelia')
library(Amelia)
imp.a = amelia(df, m = 5)
imp.a
df1 = imp.a$imputations[[1]]
df2 = imp.a$imputations[[2]]
credit = read.csv('C:\\Users\\USER\\Desktop\\2019-1\\다변량통계분석\\0320\\Credit.csv')
head(credit)
library(dplyr)
credit %>% head()
credit %>% summary()
fit.credit=lm(Balance~Student, data=credit)
fit.credit %>% summary()
fit.credit=lm(Balance~Student, data=credit)
fit.credit %>%  summary()
credit %>%  str()
head(model.matrix(fit.credit), 10)
t.test(Balance~student,data=credit)
t.test(Balance~Student,data=credit)
t.test(Balance~Student,data=credit) %>% summary( # Two sample T-test
t.test(Balance~Student,data=credit) %>% summary() # Two sample T-test
t.test(Balance~Student,data=credit) %>% summary() # Two sample T-test
t.test(Balance~Student,data=credit) # Two sample T-test
library(ISLR)
Hitters=na.omit(Hitters)
x=model.matrix(Salary~., Hitters)[,-1]
y=Hitters$Salary
y
grid=10^seq(10, -2, length=100)
ridge.mod=glmnet(x, y, alpha=0, lambda=grid)
install.packages('glmnet')
# install.packages('glmnet')
library(glmnet)
# install.packages('glmnet')
library(glmnet)
install.packages('glmnet')
library(glmnet)
grid=10^seq(10, -2, length=100)
ridge.mod=glmnet(x, y, alpha=0, lambda=grid)
plot(ridge.mod, xvar="lambda")
head(Hitters)
x
seq(10, -2, length=100)
grid
?glmnet
plot(ridge.mod, xvar="lambda")
dim(coef(ridge.mod))
coef(ridge.mod)
# Lasso
lasso.mod=glmnet(x, y, alpha=1, lambda=grid)
plot(lasso.mod, xvar="lambda")
install.packages('tubeplayR ')
install.packages('tubeplayR')
library(tubeplayR)
wd = 'C:\Users\USER\Desktop\Kookmin\19-1\데이터마이닝'
wd = 'C:\Users\USER\Desktop\Kookmin\19-1\데이터마이닝'
setwd('C:\\Users\\USER\\Desktop\\Kookmin\\19-1\\데이터마이닝')
url = C:\Users\USER\Desktop\Kookmin\19-1\데이터마이닝
url = "C:\Users\USER\Desktop\Kookmin\19-1\데이터마이닝"
url
path = "C:\Users\USER\Desktop\Kookmin\19-1\데이터마이닝"
path
pathPrep <- function(path = "clipboard") {
y <- if (path == "clipboard") {
readClipboard()
} else {
cat("Please enter the path:\n\n")
readline()
}
x <- chartr("\\", "/", y)
writeClipboard(x)
return(x)
}
pathPrep('C:\Users\USER\Desktop\Kookmin\19-1\데이터마이닝')
